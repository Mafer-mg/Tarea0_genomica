# Primero cargue las librerias:
library(BiocManager)
library(Biostrings)
library(BiocManager)
library(Biostrings)
# Ejercicicos:
sc <- readRNAStringSet ("secuencias.fasta")
aa <- translate (sc)
aa
secuencia <- AAAACCCGGT
secuencia <- "AAAACCCGGT"
secuencia_1 <- "AAAACCCGGT"
library(BiocManager)
library(Biostrings)
adn <- DNAString("AAAACCCGGT")
reverseComplement(adn)
reverseComplement (adn)
## Sin libreria especializada:
secuencia_1 <- "AAAACCCGGT"
rep <- replace (secuencia_1, c ('A'), 'T')
rep
inter <- replace (secuencia_1, c ('A', 'T')) & replace(secuencia_1, c ('T', 'a')) & replace(secuencia_1, c ('C', 'g')) & replace(secuencia_1, c('G', 'c'))
## Sin libreria especializada:
secuencia_1 <- "AAAACCCGGT"
inter <- replace (secuencia_1, c ('A', 'T')) & replace(secuencia_1, c ('T', 'a')) & replace(secuencia_1, c ('C', 'g')) & replace(secuencia_1, c('G', 'c'))
st = "AAAACCCGGT"
st = st.replace('A', 't').replace('T', 'a').replace('C', 'g').replace('G', 'c').upper()[::-1]
print(st)
st = replace('A', 't').replace('T', 'a').replace('C', 'g').replace('G', 'c').upper()[-1]
st = st.replace('A', 't').replace('T', 'a').replace('C', 'g').replace('G', 'c').upper()[-1]
st = "AAAACCCGGT"
st = st.replace('A', 't')st.replace('T', 'a')st.replace('C', 'g')st.replace('G', 'c')
print(st)
st = "AAAACCCGGT"
st = st.replace('A', 't')st.replace('T', 'a')st.replace('C', 'g')st.replace('G', 'c')
print(st)
### Secuencia correspondiente de aminoácidos:
sc <- readRNAStringSet ("secuencias.fasta")
library(BiocManager)
library(Biostrings)
### Secuencia correspondiente de aminoácidos:
sc <- readRNAStringSet ("secuencias.fasta")
aa <- translate (sc)
aa
##############################
# Plataforma Rosalind:
#### Ejercicio 1: Complementing a Strand of DNA ####
### Enlace: https://rosalind.info/problems/revc/
# Secuencia:AAAACCCGGT
# Complemento inverso: ACCGGGTTTT
## Con librerias especializadas: Biostrings
adn <- DNAString ("AAAACCCGGT")
reverseComplement (adn)
# Use la libreria Biostrings, la cual cargue arriba
# Primero con la funcion DNAString especifique la cadena que tome del problema de Rosalind
# es una cadena de ADN y lo converti ademas en un objeto llamado ´adn´.
# Despues con la funcion reverseComplement realice todo, porque tal funcion ya realiza lo que queriamos
# lo cual ver la hebra antisentido de ADN, de derecha a izquierda.
## Sin libreria especializada:
##### Ejercicio 2: Calculating Protein Mass ####
### Enlace: https://rosalind.info/problems/prtm/
## Con librerias especializadas:
## Sin libreria especializada:
base <- "AAAACCCGGT"
if (base == "A") {
print("T")
} else if ( base== "T"){
print("A")
} else if ( base== "G"){
print("C")
} else if ( base== "C"){
print("G") }
## Sin libreria especializada:
base <- "AAAACCCGGT"
if (base == "A") {
print("T")
} else if ( base== "T"){
print("A")
} else if ( base== "G"){
print("C")
} else if ( base== "C"){
print("G") }
if (base == "A") {
print("T")
} else if ( base== "T"){
print("A")
} else if ( base== "G"){
print("C")
} else if ( base== "C"){
print("G") }
return print
complemento <-function (){
secuencia <- readline (prompt = "Ingresa la secuencia:  ")
if (base == "A") {
print("T")
} else if ( base== "T"){
print("A")
} else if ( base== "G"){
print("C")
} else if ( base== "C"){
print("G") }
return print
}
complemento <-function (){
base <- readline (prompt = "Ingresa la secuencia:  ")
if (base == "A") {
print("T")
} else if ( base== "T"){
print("A")
} else if ( base== "G"){
print("C")
} else if ( base== "C"){
print("G") }
return(print(base)
}
complemento <-function (){
base <- readline (prompt = "Ingresa la secuencia:  ")
if (base == "A") {
print("T")
} else if ( base== "T"){
print("A")
} else if ( base== "G"){
print("C")
} else if ( base== "C"){
print("G") }
return(print(base)
}
complemento <-function (){
base <- readline (prompt = "Ingresa la secuencia:  ")
if (base == "A") {
print("T")
} else if ( base== "T"){
print("A")
} else if ( base== "G"){
print("C")
} else if ( base== "C"){
print("G") }
}
complemento
complemento()
AAAACCCGGT
library(BiocManager)
library(Biostrings)
## Primero cargue las librerias:
library(BiocManager)
library(Biostrings)
adn <- DNAString ("AAAACCCGGT")
reverseComplement (adn)
gen_casei <- DNAString ("gen_shirota.txt")
reverseComplement (gen_casei)
gen_casei <- readDNAStringSet ("gen_shirota.txt")
reverseComplement (gen_casei)
##### Ejercicio 2: Calculating Protein Mass ####
### Enlace: https://rosalind.info/problems/prtm/
## Con librerias especializadas:
mw ( seq  =  "QWGRRCCGWGPGRRYCVRWC" , monoisotópico  =  FALSO )
##### Ejercicio 2: Calculating Protein Mass ####
### Enlace: https://rosalind.info/problems/prtm/
## Con librerias especializadas:
install.packages("Peptides")
library (Peptides)
library(BiocManager)
library(Biostrings)
gen_casei <- readDNAStringSet ("gen_shirota.txt")
oligonucleotideFrequency(gen_casei,1)
nuc <- DNAString ("AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC")
oligonucleotideFrequency(nuc)
nuc <- DNAString ("AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC")
oligonucleotideFrequency(nuc)
oligonucleotideFrequency(nuc, 1)
nchar(gen_casei)
nucl_ade <- grepRaw ("A",gen_casei, all=T)
total_ade <- length(nucl_ade)
numero_adeninas
total_ade
nucl_a <- grepRaw ("A",gen_casei, all=T)
total_ade <- length (nucl_a)
total_ade # Primer resultado: adenina
nucl_c <-grepRaw ("C",gen_casei, all=T)
total_cit <-length (nucl_c)
total_cit #
nucl_g <- grepRaw ("G",vir1, all=T)
total_gua <- length (nucl_g)
total_gua # Tercer resultado: guanina
nucl_g <- grepRaw ("G",gen_casei, all=T)
total_gua <- length (nucl_g)
total_gua # Tercer resultado: guanina
nucl_t <- grepRaw ("T",gen_casei, all=T)
total_tim <- length (nucl_t)
total_tim # Cuarto resultado: timina
